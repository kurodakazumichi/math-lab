---
title: 直線と直線の最短距離 本気①
---
<p>
  直線と直線の最短距離についてまとめていたら、<b>あれ？2次元だったらもっと簡単な計算でよくない？</b>と気づいてしまいました。
</p>

<p>
  簡単な方の計算(といっても簡単ではない)については<a href="../line-and-line-dist0/">直線と直線の最短距離 簡易版</a>をご覧ください。
  (2次元だったら簡易版で事足りる気がしています)
</p>

<p>
  この本気版はざっくり言うと3次元における直線と直線の最短距離の求め方です。
</p>

<p>
  この記事では直線と直線の最短距離とはなんぞや？ということと、理屈は置いといて最短距離の求め方を記載しています。
</p>

<p>
  長くなるので、理屈編については<a href="../line-and-line-dist2/">直線と直線の最短距離 本気②</a>に分割しました。
</p>

<h2>直線と直線の最短距離とはなんぞや？</h2>

<p>
  ２直線の最短距離となるのは、２つの直線に対して垂直になる線の長さになります。
</p>

<div id="graph1_1"></div>

<p>
  これは上の図のように、2直線が平行な場合はイメージできるかと思います。
</p>

<p>
  この場合は、<b>直線上のどこか１点と直線の最短距離</b>を求めればいいので、<a href="../point-and-line-dist/">点と直線の最短距離</a>にて解説した方法で求めます。
</p>

<p>
  しかし、2直線が平行ではない場合はどうでしょうか
</p>

<div id="graph1_2"></div>

<p>
  2直線に垂直な線を実際に書いてみようと思っても、<b>異なる直線の両方に垂直になる線など書けない</b>じゃないかと気づきます。
</p>

<p>
  そもそも平行でない直線は必ず交わるのだから、2直線の最短距離は常に0じゃないの？計算する必要ある？
</p>

<p>
  そのような感じで無職は3日ほど頭を抱えました。
</p>

<p>
  そして閃いたのは、2本の直線に垂直になる線は<b>Z軸</b>という事でした。
</p>

<p>
  そもそも2次元なのでZ軸はないのですが、2次元で考えてもわけがわからない状況から抜け出せません。
</p>

<p>そこでいったん頭を柔らかくして、3次元で考えた場合は奥行き(Z軸)があるという事に目を向けます。</p>

<div id="graph1_3"></div>
<p>
  このような2直線があるとします。
</p>

<div id="graph1_4"></div>

<p>これは2直線を真横から見た時のイメージです。</p>

<p>一見重なっているように見えた直線も奥行き(Z軸)を考えると、夜空に輝く星たちのように距離が離れているかもしれません。</p>

<p>
  この記事で求めるのは、このように3次元で考えた時の最短距離になりますが、計算の内容は2次元でも同じになります。
</p>

<p>
  そして先に答えを言ってしまうと２次元の場合、平行でない直線は必ず交わり、Z軸はない(常に0ともいえる)ため、<b>最短距離は常に0</b>です。
</p>

<p>
  では、交わっている直線の最短距離は0なのに、それをわざわざ求めるとはどういうこと？となるのが普通かと思います。
</p>

<p>
  実際、求めたいのは最短距離ではなく、最短距離を求めるうえで手に入る<b>とある素敵な値を手に入れる事</b>が本記事の主題です。
</p>

<h2>本当に求めたいのは $t_{1}$ と $t_{2}$</h2>

<div id="graph2_1"></div>

<p>
  直線 $L1, L2$ があり、直線上の1点をそれぞれ $P_{1}, P_{2}$、直線の方向を表すベクトルをそれぞれ $\vec{v_{1}}, \vec{v_{2}}$ とします。
</p>

<p>
  また2つの直線の最短距離を結ぶ線について、$L1$ 上の点を$Q_{1}$、$L2$ 上の点を $Q_{2}$ とします。<br>
  (2次元だと奥行きがないため $Q_{1}, Q_{2}$ は同じ座標になりますが便宜上分けて書きます。)
</p>

<div id="graph2_2"></div>

<p>
  $Q_{1}$ は $\vec{v_{1}}$ を伸ばした先にあります、どれだけ伸ばせば $Q_{1}$ に届くかの値を $t_{1}$ とします。
</p>

<div id="graph2_3"></div>
<p>
  $Q_{2}$ は $\vec{v_{2}}$ を伸ばした先にあります、どれだけ伸ばせば $Q_{2}$ に届くかの値を $t_{2}$ とします。
</p>

<p>式にするとこうなります。</p>

<p class="math">
  $Q_{1} = P_{1} + t_{1}\vec{v_{1}}$<br>
  $Q_{2} = P_{2} + t_{2}\vec{v_{2}}$<br>
</p>

<p>
  $t_{1}, t_{2}$ を求める事ができれば、$Q_{1}, Q_{2}$ がわかり、また$Q_{1}, Q_{2}$ の間の距離が2直線の最短距離となります。
</p>

<p>冒頭でふれた<b>とある素敵な値</b>とはこの $t_{1}, t_{2}$ のことです。</p>

<p>
  そして以下が $t_{1}, t_{2}$ を求める式です。
</p>
<p class="math">
  $D_{11} = \vec{v_{1}} \cdot \vec{v_{1}}$、
  $D_{22} = \vec{v_{2}} \cdot \vec{v_{2}}$、
  $D_{12} = \vec{v_{1}} \cdot \vec{v_{2}}$ とすると<br><br>  
  $
    t_{1}
   = 
   \frac
    {{D_{12}} \vec{v_{2}} \cdot(P_{1} - P_{2}) - D_{22} \vec{v_{1}} \cdot (P_{1} - P_{2}) }
    {D_{11} D_{22} - D_{12} D_{12}}
  $<br>

  $Q_{1} = P_{1} + t_{1}\vec{v_{1}}$<br>

  $
    t_{2} = \frac{\vec{v_{2}} \cdot (Q_{1} - P_{2})}{D_{22}}
  $<br>
  $Q_{2} = P_{2} + t_{2}\vec{v_{2}}$
</p>

<p>
  なぜこの式で $t_{1}, t_{2}$ が求まるのかは<a href="../line-and-line-dist2/">直線と直線の最短距離 本気②</a>をご覧ください。
</p>

<h2>$t_{1}, t_{2}$ の値からわかること</h2>

<div id="graph3_1"></div>

<p>
  $t_{1}, t_{2}$ は $\vec{v_{1}}, \vec{v_{2}}$ をどれだけ伸ばせば $Q_{1}, Q_{2}$ に届くのかという値なので、2次元の場合 $t_{1}, t_{2}$ のどちらかがわかれば直線の交点の位置がわかります。
</p>

<div id="graph3_2"></div>

<p>
  また $\vec{v_{1}}, \vec{v_{2}}$ が交差しているときは、$t_{1}, t_{2}$ の値が 0 ～ 1の間に収まります。
</p>

<p>
  直線が交差しているかどうかだけでなく、$\vec{v_{1}}, \vec{v_{2}}$ が交差しているかどうかを $t_{1}, t_{2}$ の値を見ることで判断できます。
</p>

<p>
  これは線分が交差しているかどうかの判定として使うことができます。
</p>

<h2>サンプルプログラム</h2>

<pre><code>/**
  * ２直線の最短距離を求める関数の戻り値を定義
  */
 interface IResultDistance {
   distance:number, /** 直線間の距離 */
   p1:Vector2, /** 直線１上の垂線の足 */
   p2:Vector2, /** 直線２上の垂線の足 */
   t1:number,  /** 直線１側の媒介変数 */
   t2:number,  /** 直線２側の媒介変数 */
 }
 
 /**
  * ２直線の最短距離を求める
  */
 function getNearestDistance(l1:Line, l2:Line): IResultDistance 
 {
   // ２直線が平行だったら、点と直線の最短距離に帰結
   if (Vector2.isParallel(l1.v, l2.v)) {
     const res = PointAndLine.getNearestDistance(l1.p, l2);
 
     return {
       distance: res.distance,
       p1: l1.p.clone(),
       p2: res.h,
       t1: 0,
       t2: res.t,
     }
   }
 
   // 2直線が交差しているときの最短距離、及び媒介変数 t を求める計算(最短距離は基本0)
   const p1 = l1.p;
   const p2 = l2.p;
   const v1 = l1.v;
   const v2 = l2.v;
   const D12 = v1.dot(v2);
   const D11 = v1.sqrMagnitude;
   const D22 = v2.sqrMagnitude;
   const P12 = Vector2.sub(p1, p2);
 
   // 媒介変数 t と 衝突点 q1, q2 の算出
   const t1 = (D12 * v2.dot(P12) - D22 * v1.dot(P12)) / (D11 * D22 - D12 * D12);
   const q1 = Vector2.add(p1, Vector2.times(v1, t1));
   const t2 = v2.dot(Vector2.sub(q1, p2)) / D22;
   const q2 = Vector2.add(p2, Vector2.times(v2, t2));
   
   return {
     distance: Vector2.sub(q2, q1).magnitude,
     p1:q1,
     p2:q2,
     t1, 
     t2,
   };
 }</code></pre>