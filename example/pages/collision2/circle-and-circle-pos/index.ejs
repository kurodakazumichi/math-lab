---
title: 円と円の交点
---
<div id="graph1"></div>

<p>
  <a href="../circle-and-circle/">円と円の衝突</a>は非常にシンプルで簡単なのですが、円と円の交点を求めようとすると突如難易度が上がります。
</p>

<p>
  ここではそんな円と円の交点の求め方についてまとめていきます。
</p>

<h2>円と円の交点の考え方</h2>

<div id="graph2_1_1"></div>
<p>円の中心をそれぞれ$C_{1}, C_{2}$、円の交点をそれぞれ $P, P'$、線分 $C_{1}C_{2}$ と 線分 ${PP'}$ の交点を $H$ とします。</p>
<p>この時、$\angle C_{1}HP$ は<b>90度</b>になります。</p>

<div id="graph2_1_2"></div>
<p>$C_{1}$ から $C_{2}$ に向かうベクトル $\vec{C_{1}C_{2}}$ を<b>正規化</b>したベクトルを $\vec{n_{1}}$ とします。</p>

<div id="graph2_1_3"></div>
<p>$\vec{n_{1}}$ を 左に<b>90度回転</b>させてできるベクトル (方向的に$H$ から $P$ に向かう)を $\vec{n_{2}}$ とします。</p>

<div id="graph2_1_4"></div>
<p>交点 $P$ の位置は、$C_{1}$ に $\vec{n_{1}}$ を伸ばしたベクトルを足して $H$ まで行き</p>

<div id="graph2_1_5"></div>
<p>さらに $H$ から $\vec{n_{2}}$ を伸ばしたベクトルを足すことでたどり着くことができます。</p>

<div id="graph2_1_6"></div>
<p>$P'$ にたどり着くには、$H$ から $\vec{n_{2}}$ を逆方向に伸ばせばたどりつけます。</p>

<p>様々な計算が必要になりますが、これが円と円の交点を求める大まかな流れとなります。</p>

<h2>円と円の交点の求め方</h2>

<div id="graph2_2_1"></div>
<p>円の中心をそれぞれ$C_{1}, C_{2}$、円の半径をそれぞれ $r_{1}, r_{2}$、円の交点をそれぞれ $P, P'$、線分$C_{1}C_{2}$ と 線分 $PP'$ の交点を $H$とします。</p>

<h3>辺$C_{1}H$ の長さを求める編</h3>

<div id="graph2_2_2"></div>
<p>まず辺$C_{1}H$ の長さ(青線の部分)を求めることから始めます。</p>

<div id="graph2_2_3"></div>
<p>$\triangle C_{1}C_{2}P$ の各辺 $C_{1}C_{2}, C_{1}P, C_{2}P$ の長さをそれぞれ、$a, b, c$ とおきます。</p>

<p>この時、三角形の三辺 $a, b, c$ の長さは全てわかっているという事実があります。</p>

<p>$a$ は $\vec{C_{1}C_{2}}$ の長さですし、$b$ と $c$ はそれぞれ 円の半径です。</p>

<p class="math">
  $a = |\vec{C_{1}C_{2}}|$<br>
  $b = r_{1}$<br>
  $c = r_{2}$<br>
</p>

<p>三角形には素敵な性質が沢山ありますが、<b>3辺全ての長さが分かっていると余弦定理</b>が使えます。</p>

<div id="graph2_2_4"></div>
<p>とりあえず、$\angle PC_{1}C_{2}$ の角度を $\theta$ とおき、$cos(\theta)$ の値を求めてみたいと思います。</p>

<p>$cos(\theta)$ は<b>余弦定理</b>より、以下の計算で求める事ができます。</p>

<p class="math">
  $cos(\theta) = \frac{a^2 + b^2 - c^2}{2ab}$
</p>

<div id="graph2_2_5"></div>
<p>$cos(\theta)$ を手に入れたことによって、不思議な事に、辺 $C_{1}H$ の長さを求めることができるようになります。</p>

<div id="graph2_2_6"></div>
<p>辺 $C_{1}H$ の長さを $r_{c}$ とおくと、$r_{c}$ は $b$ と $cos(\theta)$ の値を掛け算するだけで求める事ができてしまいます。</p>


<p class="math">
  $r_{c} = b \cdot cos(\theta)$
</p>

<p>なぜこれで、$r_{c}$ が求まるのかの補足</p>

<div id="graph2_2_7"></div>

<p>$\triangle C_{1}HP$ に着目します。</p>

<p class="math">
  $cos(\theta)$ は$\frac{底辺}{斜辺}$ なので、図から $\frac{r_{c}}{b}$ となります。<br>
  $b \cdot cos(\theta)$ は以下のように置き換えられます。<br>
  $b \cdot \frac{r_{c}}{b} = r_{c}$
</p>

<p>長い計算でしたが、これで目的だった 辺 $C_{1}H$ の長さ($r_{c}$)がわかりました！</p>

<h3>辺 $HP$ の長さを求める編</h3>

<div id="graph2_2_8"></div>
<p>続いて求めたいのが、辺 $HP$ の長さとなります。(辺 $HP$ の長さを $r_{s}$ とおきます)</p>

<p>$\triangle PC_{1}H$ に注目すると、$\triangle PC_{1}H$ は直角三角形であり、2辺の長さはもうわかっています。</p>

<p>そして直角三角形の2辺の長さがわかっている時、<a href="../../theorem/pythagorean/">三平方の定理</a>を使って残りの辺の長さを求める事ができます。</p>

<div id="graph2_2_9"></div>
<p>
  直角三角形の底辺を $r_{c}$、斜辺は円の半径なので $r_{1}$ とすると、<a href="../../theorem/pythagorean/">三平方の定理</a>により
</p>

<p class="math">
  $r_{s} = \sqrt{r_{1}^2 - r_{c}^2}$
</p>

<p>これで$r_{s}$ が求まりました。</p>

<h3>$\vec{n_{1}}$と$\vec{n_{2}}$ を求める編</h3>

<div id="graph2_2_10"></div>
<p>続いて、図の中にある$\vec{n_{1}}$と$\vec{n_{2}}$を求めて生きたいと思います。</p>

<p>
  $\vec{n_{1}}$ は $C_{1}$ から $C_{2}$ に向かうベクトル $\vec{C_{1}C_{2}}$ を求めて正規化する事で手に入ります。
</p>

<p class="math">
  $\vec{n_{1}} = \vec{C_{1}C_{2}}$ を正規化<br>
  $\vec{C_{1}C_{2}} = C_{2} - C_{1} $
</p>

<p>そして、$\vec{n_{2}}$ は $\vec{n_{1}}$ を左に<b>90度</b>回転させる事で得られそうです。</p>

<p><a href="../../vector2/rotation/">ベクトルの回転</a>でベクトルを回転させる方法を説明していますが、<b>90度</b>回転させる場合はもっと簡単な方法があります。</p>

<p>ベクトルの$xy$ 成分を入れ替えて、$x$成分に -1 を掛けると、左に<b>90度</b>回転したベクトルが得られます</p>

<p class="math">
  $ \vec{n_{1}} = (x, y) $ とすると<br>
  $ \vec{n_{2}} = (-y, x) $ 
</p>

<p>これで $\vec{n_{1}}$と$\vec{n_{2}}$ が求まりました。</p>

<h3>交点 $P, P'$ を求める編</h3>

<p>ここまできてようやく、交点 $P, P'$ を求める材料がそろいました。</p>

<div id="graph2_2_11"></div>
<p>交点 $P$ は $C_{1}$ の位置に $\vec{n_1} $ を $r_{c}$ 倍したベクトルを足し、更に $\vec{n_2} $ を $r_{s}$ 倍したベクトルを足した位置になります。</p>

<div id="graph2_2_12"></div>
<p>交点 $P$ は $C_{1}$ の位置に $\vec{n_1} $ を $r_{c}$ 倍したベクトルを足し、更に $\vec{n_2} $ を $-r_{s}$ 倍したベクトルを足した位置になります。</p>

<p class="math">
  $P = C_{1} + r_{c}\vec{n_{1}} + r_{s}\vec{n_{2}}$<br>
  $P' = C_{1} + r_{c}\vec{n_{1}} - r_{s}\vec{n_{2}}$<br>
</p>

<p>長い長い旅路を経て、ようやく円と円の交点を求める事ができました。</p>

<p>
  交点を求める計算はこれで終わりになります、しかし衝突判定的にはまだ考慮するべきことが残っています。
</p>

<p>
  円同士が衝突していない場合は、そもそも交点が存在しませんし、円がぴったりと接している場合は交点が1になります。
</p>

<p>以下では円同士が交点を持たない時、交点が1つの時の判定について記載していきます。</p>

<h2>交点を持たないとき</h2>

<p>
  2つの円が交点を持たないケースが２パターンあります。
</p>

<p>１つは円が接触していないとき、もう一つは一方の円の中に円が内包されている時です。</p>

<p>それぞれについて判定方法を見ていきます。</p>

<h3>接触していない場合</h3>

<div id="graph3_1"></div>

<p>図を見るからに明らかですが、円は接触しておらず交点も存在しません。</p>
<p>円と円が接触しているかどうかの判定については、<a href="../circle-and-circle/">円と円の衝突</a>に方法を記載していますのでそちらをご覧ください。</p>

<h3>内包している場合</h3>

<div id="graph3_2"></div>
<p>
  円が一方の円の中に内包されているかどうかは、2つの円の距離と半径の差を比較します。(差はマイナスになることがあるので絶対値で比較します)
</p>

<p><b>円の距離 &lt; 半径の差の絶対値</b>であれば円は一方の円に内包された状態になります。</p>

<p class="math">
  円の中心をそれぞれ$C_{1}, C_{2}$、半径を $r_{1}, r_{2}$ としたとき<br>
  $|\vec{C_{1}C_{2}}| &lt; |r_{1} - r_{2}| $ であれば、円は内包関係にある。
</p>

<h3>プログラム的な話</h3>
<p>
  プログラムでは、円の交点を求める前に、接触しているかどうか、内包しているかどうかを調べます。
</p>

<p>接触していない、もしくは円が内包関係にある場合、交点は存在しないのでそこで処理を終えます。</p>

<h2>交点が１つのとき</h2>

<p>円がぴったりと接している時、交点は1つに定まります。(実際には小数点誤差でなかなかぴったりにはなりませんが)</p>

<p>そして円が接しているケースは円の外側で接している(外接)と円の内側で接している(内接)の２通りがあります。</p>

<h3>外接している時の接点</h3>

<div id="graph4_1"></div>

<p>円が外接しているのは、$\vec{C_{1}C_{2}}$ の長さが、<b>円の半径の和</b>と一致する時です。</p>

<p class="math">
  $ |\vec{C_{1}C_{2}}| = r_{1} + r_{2} $ であれば２つの円は外接している。
</p>

<div id="graph4_2"></div>
<p>円の接点 $P$ は $C_{1}$ に $\vec{C_{1}C_{2}}$ を正規化したベクトル($\vec{n}$とする)を、$r_{1}$ 倍したベクトルを足せば求まります。</p>

<p class="math">
  $P = C_{1} + r_{1}\vec{n}$
</p>

<h3>内接している時の接点</h3>

<div id="graph4_3"></div>
<p>円が内接しているのは、$\vec{C_{1}C_{2}}$ の長さが、<b>円の半径の差</b>と一致する時です。(差はマイナスになることがあるため絶対値で比較します)</p>

<p class="math">
  $ |\vec{C_{1}C_{2}}| = |r_{1} - r_{2}| $ であれば２つの円は内接している。
</p>

<p>内包している場合の円の接点は少しややこしい問題があります。</p>

<div id="graph4_4"></div>
<p>$C1$ の円の方が大きい場合、接点は$\vec{C_{1}C_{2}}$を正規化したベクトル($\vec{n}$とする)を $r_{1}$ 倍して、$C_{1}$ に足せば求まります。(外接の時と同じ)</p>

<div id="graph4_5"></div>
<p>しかし、$C1$ の円の方が小さい場合、接点は$\vec{C_{1}C_{2}}$を正規化したベクトル($\vec{n}$とする)を $-r_{1}$ 倍して、$C_{1}$ に足さなければいけません。</p>

<p>このように、円の大小関係によって$\vec{n}$ を $r_{1}$ 倍するのか、 $-r_{1}$ 倍するのか、微妙に違いが発生します。</p>

<p class="math">
  $C1$ の円の方が<b>大きい</b>時、接点 $P$ は <br>
  $P = C_{1} + r_{1}\vec{n}$ <br>
  $C1$ の円の方が<b>小さい</b>時、接点 $P$ は <br>
  $P = C_{1} - r_{1}\vec{n}$ <br>
</p>

<h2>サンプルコード</h2>

<pre><code>/**
  * 直線と円の衝突
  * @param circle1 円１
  * @param circle2 円２
  */
 export function intercect(circle1:Circle, circle2:Circle) 
 {
   // 衝突判定の結果オブジェクト
   const result:IIntercectResult = {
     hit: false,
     pos: [],
   }
 
   // 円1の中心をC1、円2の中心をC2、交点の1つをPとする。
   const C1 = circle1.p;
   const C2 = circle2.p;
 
   // C1からC2に向かうベクトルを vC1C2と定義する
   const vC1C2 = Vector2.sub(C2, C1);
 
   // 辺C1C2の長さを a とする
   const a = vC1C2.magnitude;
 
   // a が 2円の半径の和より大きければ当たっていない
   const sumR = circle1.r + circle2.r;
   if (sumR < a) return result;
 
   // ここに来たらとりあえず当たっている
   result.hit = true;
 
   // 円と円の交点を求めていく
 
   // 円が内包されている時は接点は存在しない
   // 円が内包されている場合、a は 2円の半径の差より小さい
   const subR = Math.abs(circle1.r - circle2.r);
   
   if (a < subR) {
     return result;
   }
 
   // 円が外接しているとき、a と 2つの円の半径の和は等しく、接点は１つだけになる。
   if (a === sumR) {
       // vC1C2 を正規化したベクトルを n とする
       const n = vC1C2.normalize;
 
       // 接点P は C1 に n を 円の半径の長さ分伸ばしたベクトルを足せばいい
       const P = Vector2.add(circle1.p, n.times(circle1.r));
       result.pos.push(P);
   
       return result;
   }
 
   // また内接しているとき、a と ２つの円の半径の差は等しく、接点は１つだけになる。
   if (a === subR) 
   {
     // vC1C2 を正規化したベクトルを n とする
     const n = vC1C2.normalize;
 
     // C1の方が大きいかどうか
     const isLarge = (circle1.r > circle2.r);
 
     // 接点をPとすると
     // C1の方が大きい場合、P は C1 + r1・n
     // C1の方が小さい場合、P は C1 - r1・n
     const P = Vector2.add(circle1.p, n.times(isLarge? circle1.r:-circle1.r));
     result.pos.push(P);
 
     return result;
   }
 
   // 三角形C1C2Pの三辺は全て既知である。
   // 辺C1Pの長さをb、辺C2Pの長さをcとする
   const b = circle1.r;
   const c = circle2.r;
 
   // 角C1 の cosθ は余弦定理により
   const cos = (a**2 + b**2 - c**2) / (2 * a * b);
 
   // PからC1C2に垂線を落とした時に当たる位置を H とし、C1Hの長さを rc とすると rc は b * cos
   const rc = b * cos;
 
   // 辺HPの長さを rs とすると rs は三平方の定理から rs = √b^2 - t^2
   const rs = Math.sqrt(b**2 - rc**2);
 
   // vC1C2の正規化したベクトルを n1とする
   const n1 = vC1C2.normalize;
 
   // n1を左に90度回転させたベクトルを n2とする
   const n2 = new Vector2(-n1.y, n1.x);
 
   // 交点であるPの座標は C1 + tn1 + sn2 となり
   // もう一つの交点C'は C1 + tn1 - sn2 となる
   const tn1 = n1.times(rc);
   const sn2 = n2.times(rs);
 
   result.pos.push(circle1.p.clone().add(tn1).add(sn2));
   result.pos.push(circle1.p.clone().add(tn1).sub(sn2));
   
   return result;
 }</code></pre>