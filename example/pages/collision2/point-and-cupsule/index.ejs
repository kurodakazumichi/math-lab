---
title: 点とカプセルの衝突
---
<div id="graph1"></div>

<p>
  この記事では点とカプセルの衝突についてまとめていきます。
</p>

<h2>考え方</h2>

<h3>カプセルの定義</h3>

<div id="graph2"></div>

<p>
  カプセルは円が線分上を移動することで出来上がる図形です。
</p>

<p>
  カプセルの定義については、<a href="../primitive/">衝突判定用の形状定義</a>に記載していますが、線分と円の半径(カプセルの太さ)の情報から定義しています。
</p>

<h3>衝突判定</h3>

<p>
  点とカプセルの衝突を考える際に、カプセルの形のままでは判定できないので少し考え方を変えます。
</p>

<div id="graph3_1"></div>
<p>
  点とカプセルがあります。
</p>

<div id="graph3_2"></div>

<p>
  <span class="green">●</span>をドラッグして見て欲しいのですが、まず最初に、点とカプセルの線分の最も近い点を探します。
</p>

<p>点と線分の最も近い点の求め方は<a href="../point-and-segment-nearest/">点と線分の最近傍点</a>にて解説しているのでこちらをお読みください。</p>

<div id="graph3_3"></div>

<p>
  点と線分の最も近い場所がわかったら、そこに円があるものとして、その円と点が衝突しているかを調べます。
</p>

<p>
  つまり、<span class="green">●</span>から<span class="yellow">★</span>までの距離と、円の半径の長さを比較します。
</p>

<p>
  点と円が衝突してる場合、点とカプセルが衝突しているという事になります。
</p>

<p>
  点と円の衝突は<a href="../point-and-circle/">点と円の衝突</a>で解説しているのでこちらをお読みください。
</p>

<h2>まとめ</h2>

<p>
  点とカプセルの衝突は以下の手順で求める。
</p>

<ol>
  <li>点とカプセルの線分の最近傍点を求める。</li>
  <li>最近傍点に円があるものとして、点と円の衝突判定を行う。</li>
</ol>

<h2>サンプルコード</h2>

<pre><code>/**
 * 点とカプセルが当たっているかどうか
 * @param point 点
 * @param capsule カプセル
 */
export function isHit(point:Vector2, capsule:Capsule) 
{
  // カプセルと点の最近傍点を求める
  const p = PointAndSegment.getNearest(point, capsule.s);
 
  // 最近傍点から点に向かうベクトル
  const v = Vector2.sub(point, p);
 
  // 最近傍点と点の距離がカプセルの半径(太さ)より短ければ当たっている
  return (v.sqrMagnitude < capsule.r * capsule.r);
}</code></pre>