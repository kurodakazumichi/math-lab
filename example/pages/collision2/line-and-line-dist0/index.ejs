---
title: 直線と直線の最短距離 簡易版
---
<p>
  <a href="../line-and-line-dist1/">直線と直線の最短距離 本気①</a>を書いていたら、あれ？2次元だったらもっと簡単な計算で事足りるのでは？と気づいてしまったので もう少し簡単な方法についてまとめます。
</p>

<p>
  むしろ <a href="../line-and-line-dist1/">直線と直線の最短距離 本気①</a> という記事は不要だった感さえ否めません。(でも頑張ったので本気編として残しておきます)
</p>

<h2>直線と直線の最短距離とはなんぞや？</h2>

<div id="graph1_1"></div>

<p>
  上の図のように2直線が平行な場合、2直線に垂直になる線分(緑の線)の長さとなります。
</p>

<p>
  この場合は、<b>直線上のどこか１点と直線の最短距離</b>を求めればいいので、<a href="../point-and-line-dist/">点と直線の最短距離</a>にて解説した方法で求めます。
</p>

<div id="graph1_2"></div>

<p>
  上の図のように2直線が平行ではない場合、2次元では直線は必ず交差するので、最短距離は0です。(計算するまでもありませんね)
</p>

<p>
  最短距離の求め方だけであればこれで終了なんですが、本題はここからです。
</p>

<p>
  上記の方法で最短距離は求まるのですが、直線に関する衝突判定をする場合には最短距離だけではなく、もう少し追加で欲しい情報があったりします。
</p>

<p>
  この<b>追加で欲しい情報</b>とは何か、またどうやって求めるのかについて記載していきます。
</p>

<h2>追加で欲しい情報は $t_{1}$ と $t_{2}$</h2>

<div id="graph2_1"></div>

<p>
  直線 $L1, L2$ があり、直線上の1点をそれぞれ $P_{1}, P_{2}$、直線の方向を表すベクトルをそれぞれ $\vec{v_{1}}, \vec{v_{2}}$ とします。
</p>

<p>
  また2直線の交点を $Q$ とします。
</p>

<div id="graph2_2"></div>

<p>
  $Q$ は $\vec{v_{1}}$ を伸ばした先にあります、$\vec{v_{1}}$ をどれだけ伸ばせば $Q$ に届くかの値を $t_{1}$ とします。
</p>

<div id="graph2_3"></div>
<p>
  $Q$ は $\vec{v_{2}}$ を伸ばした先にあります、$\vec{v_{2}}$ をどれだけ伸ばせば $Q$ に届くかの値を $t_{2}$ とします。
</p>

<p>
  この $t_{1}, t_{2}$ を求める事ができれば 直線の交点の位置もわかりますし、また<b>線分やカプセルといった形状の衝突判定もできる</b>ようになったりします。
</p>

<p>
  またこのような $t_{1}, t_{2}$ を<b>媒介変数</b>というそうです。
</p>

<p>
  本記事の主題は直線と直線の最短距離というより、この<b>媒介変数</b> $t_{1}, t_{2}$ を求める事にあります。
</p>

<p>
  $t_{1}, t_{2}$ の求め方について<a href="../line-and-line-dist1/">直線と直線の最短距離 本気①</a>の方でもまとめていたのですが
  こちらの計算がとてつもなく長く、更に難しいんです。
</p>

<p>
  そして、2次元ならもっと簡単な計算で求められるのでは？と気づいたのでその計算方法を紹介します。
</p>

<h2>$t_{1}, t_{2}$ を求める計算式</h2>

<div id="graph2_4"></div>

<p>
  直線 $L1, L2$ があり、直線上の1点をそれぞれ $P_{1}, P_{2}$、直線の方向を表すベクトルをそれぞれ $\vec{v_{1}}, \vec{v_{2}}$ 、2直線の交点を $Q$ とします。
</p>

<p>
  また$P_{2}からP_{1}$ に向かうベクトルを $\vec{v}$ とします。
</p>

<p class="math">
  $Q = P_{1} + t_{1}\vec{v_{1}}$<br>
  $Q = P_{2} + t_{2}\vec{v_{2}}$
</p>

<p>
  としたとき、$t_{1}$ か $t_{2}$ がわかれば $Q$ の位置がきまります。<br>
</p>

<p>そして、この $t_{1}, t_{2}$ はベクトルの外積を使って、以下の式で求められます。</p>

<p class="math">
  $t1 = 
    \frac 
    {\vec{v} \times \vec{v_{2}}}
    {\vec{v_{2}} \times \vec{v_{1}}}
  $<br>
  $t2 = 
    \frac 
    {-\vec{v} \times \vec{v_{1}}}
    {\vec{v_{1}} \times \vec{v_{2}}}
  $<br>
</p>

<p>
  ※2直線が平行な場合は分母が0(平行なベクトル同士の外積は0)になってしまうので、この式は使えません。
</p>

<p>
  このように、2直線が持っている情報から <b>媒介変数</b> $t_{1}, t_{2}$ を求めることができ、この $t_{1}, t_{2}$ は<b>衝突判定を行う上で重要な情報として利用できるので存在に慣れておきましょう。</b>
</p>

<h2>なぜ、この式で$t_{1}, t_{2}$ が求められる？</h2>

<h3>$t_{1}$ の求め方</h3>

<div id="graph2_5"></div>

<p>
  $\vec{P_{2}P_{1}}$ を $\vec{v}$、$\vec{P_{2}Q}$ を $\vec{v'_{2}}$ と表します。
</p>

<p>
  $\vec{v'_{2}}$ は以下のようにあらわせます。
</p>

<p class="math">
  $\vec{v'_{2}} = \vec{v} + t_{1}\vec{v_{1}}$
</p>

<p>また $\vec{v_{2}}$ と $\vec{v'_{2}}$ は平行なので、外積は0になります。</p>

<p>これを式で表し解いていきます。</p>

<p class="math">
  $\vec{v_{2}} \times \vec{v'_{2}} = 0$<br>
  $\vec{v_{2}} \times (\vec{v} + t_{1}\vec{v_{1}}) = 0$<br>
  $\vec{v_{2}} \times \vec{v} + \vec{v_{2}} \times(t_{1}\vec{v_{1}}) = 0$　※外積は分配法則が使える<br>
  $\vec{v_{2}} \times \vec{v} + t_{1} (\vec{v_{2}} \times \vec{v_{1}}) = 0$　※定数倍は抜き出せる<br>
  $t_{1} (\vec{v_{2}} \times \vec{v_{1}}) = -\vec{v_{2}} \times \vec{v}$<br>
  $t_{1} (\vec{v_{2}} \times \vec{v_{1}}) = \vec{v} \times \vec{v_{2}}$　　　※外積は入れ替えると符号が変わる<br>
  $t_{1} = \frac{\vec{v} \times \vec{v_{2}}}{\vec{v_{2}} \times \vec{v_{1}}}$
</p>

<h3>$t_{2}$ の求め方</h3>

<p>基本的に $t_{1}$ の求め方と同様です。</p>

<div id="graph2_6"></div>

<p>
  $\vec{P_{2}P_{1}}$ を $\vec{v}$、$\vec{P_{1}Q}$ を $\vec{v'_{1}}$ と表します。
</p>

<p>
  $\vec{v'_{1}}$ は以下のようにあらわせます。
</p>

<p class="math">
  $\vec{v'_{1}} = -\vec{v} + t_{2}\vec{v_{2}}$
</p>

<p>また $\vec{v_{1}}$ と $\vec{v'_{1}}$ は平行なので、外積は0になります。</p>

<p>これを式で表し解いていきます。</p>

<p class="math">
  $\vec{v_{1}} \times \vec{v'_{1}} = 0$<br>
  $\vec{v_{1}} \times (-\vec{v} + t_{2}\vec{v_{2}}) = 0$<br>
  $-\vec{v_{1}} \times \vec{v} + \vec{v_{1}} \times(t_{2}\vec{v_{2}}) = 0$　※外積は分配法則が使える<br>
  $-\vec{v_{1}} \times \vec{v} + t_{2} (\vec{v_{1}} \times \vec{v_{2}}) = 0$　※定数倍は抜き出せる<br>
  $t_{2} (\vec{v_{1}} \times \vec{v_{2}}) = \vec{v_{1}} \times \vec{v}$<br>
  $t_{2} (\vec{v_{1}} \times \vec{v_{2}}) = -\vec{v} \times \vec{v_{1}}$　　　※外積は入れ替えると符号が変わる<br>
  $t_{2} = \frac{-\vec{v} \times \vec{v_{1}}}{\vec{v_{1}} \times \vec{v_{2}}}$
</p>

<h3>まとめ</h3>

<p>$t_{1}, t_{2}$ を求める理屈は以上となります。</p>

<h2>サンプルコード</h2>

<pre><code>/**
  * ２直線の最短距離を求める関数の戻り値を定義
  */
 interface IResultDistance {
   distance:number, /** 直線間の距離 */
   p1:Vector2, /** 交点(実質p2と同じ) */
   p2:Vector2, /** 交点(実質p1と同じ) */
   t1:number,  /** 直線１側の媒介変数 */
   t2:number,  /** 直線２側の媒介変数 */
 }
 
 /**
  * 2直線の最短距離を求める
  * @param l1 直線１
  * @param l2 直線２
  */
 function getNearestDistance(l1:Line, l2:Line): IResultDistance {
   // ２直線が平行だったら、点と直線の最短距離に帰結
   if (Vector2.isParallel(l1.v, l2.v)) {
     const res = PointAndLine.getNearestDistance(l1.p, l2);
 
     return {
       distance: res.distance,
       p1: l1.p.clone(),
       p2: res.h,
       t1: 0,
       t2: res.t,
     }
   }
 
   const v1 = l1.v;
   const v2 = l2.v;
   const v = Vector2.sub(l1.p, l2.p);
 
   const t1 = v.cross(v2) / v2.cross(v1);
   const t2 = v.times(-1).cross(v1) / v1.cross(v2);  
 
   const p1 = Vector2.add(l1.p, Vector2.times(l1.v, t1));
   const p2 = Vector2.add(l2.p, Vector2.times(l2.v, t2));
 
   return {
     distance: Vector2.sub(p1, p2).magnitude,
     p1, p2, t1, t2
   };
 }</code></pre>