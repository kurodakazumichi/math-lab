---
title: 直線と矩形の衝突
---
<div id="graph1"></div>
<p>
  ここでは直線と矩形(回転なし)の衝突判定についてまとめます。
</p>

<h2>考え方</h2>

<p>
  直線と矩形の衝突について、<b>直線と矩形の4辺のいずれかが当たっていれば直線と矩形は当たっている</b>としても良さそうと思ったのですが
</p>

<p>
  直線と矩形が当たっているかどうかだけであれば、<b>矩形の角4つ全てが、直線の右側にある、もしくは左側にある</b>としても判定ができそうです。
</p>

<p>
  前者の場合、<a href="../line-and-segment/">直線と線分の衝突</a>を判定する事になりますが
</p>
<p>
  後者の場合、<b>直線と点の判定</b>だけでよく、計算コストも安くすみそうなので、後者の方法で判定していきたいと思います。
</p>

<h2>求め方</h2>

<p>
  矩形の角4点はただの点ですので、直線と点の関係を調べる問題に帰結します。
</p>

<p>
  ある点が直線の右にあるのか、左にあるのか、はたまた直線上にあるのかは<a href="../../vector2/cross2/">ベクトルの外積の特性</a>を使って調べる事ができます。
</p>

<div id="graph2_1"></div>

<p>
  直線の方向ベクトルを $\vec{v_{1}}$、直線上の点から矩形の角に向かうベクトルを $\vec{v_{2}}$ とします。
</p>

<p>
  $\vec{v_{1}}$ と $\vec{v_{2}}$ の外積を取り、結果がプラスなら角は直線の左側に、マイナスなら直線の右側に、0であれば直線上にあることになります。
</p>

<p class="math">
  $\vec{v_{1}} \times \vec{v_{2}} &gt; 0$ であれば角は直線の左側<br>
  $\vec{v_{1}} \times \vec{v_{2}} &lt; 0$ であれば角は直線の右側<br>
  $\vec{v_{1}} \times \vec{v_{2}} = 0$ であれば角は直線上<br>
</p>

<div id="graph2_2"></div>
<p>
  上記の判定を矩形の角4点全てに対して行っていきます。
</p>

<h3>直線と矩形が当たっていないとき</h3>

<div id="graph2_3"></div>

<p>直線と矩形が衝突していない場合、外積の結果は<b>全てマイナスか、全てプラス</b>になるはずです。</p>

<h3>直線と矩形が当たっているとき</h3>

<div id="graph2_4"></div>

<p>直線と矩形が衝突している場合、外積の結果は<b>いくつかがプラスで、いくつかがマイナス</b>になるはずです。</p>

<p>直線と角4点の外積を調べながら、外積の符号が異なる結果が得られた時点で、直線と矩形は当たっているとなります。</p>

<h3>直線が矩形の角にぴったりと接しているとき</h3>

<div id="graph2_5"></div>

<p>
  直線が矩形の角に接している時は<b>外積の値は0</b>になりますので、これも一応当たっているという判定としておきましょう。
</p>

<p>外積の値が0になる角が見つかった時点で、直線と矩形は当たっているとなります。</p>

<p>以上で、直線と矩形の衝突についての説明は終わりです。</p>

<h2>サンプルコード</h2>

<pre><code>/**
  * 直線と矩形が当たっているかどうか
  * @param line 直線１
  * @param rect 矩形
  */
 export function isHit(line:Line, rect:Rect) 
 {
   // 矩形の角4点を配列化
   const points = [
     rect.p1,
     rect.p2,
     rect.p3,
     rect.p4,
   ];
 
   // 外積の符号を覚えておくための変数
   let sign = 0;
 
   // 角4点と直線の方向ベクトルの関係性を調べる
   for(let i = 0; i < points.length; ++i) {
 
     // 直線の向きベクトルを v1 とする
     const v1 = line.v;
 
     // 直線の任意の点から矩形の角に向かうベクトルをv2 とする
     const v2 = Vector2.sub(points[i], line.p);
 
     // 外積を取る
     const cross = Vector2.cross(v1, v2);
 
     // 外積の結果が0だったら衝突している
     if (cross === 0) return true;
 
     // 初回だけ外積の符号を記憶しておく
     if (i == 0) {
       sign = Math.sign(cross);
     }
 
     // 角2点目以降、外積の符号が変わっていたら交差している
     else {
       if (sign !== Math.sign(cross)) return true;
     }
   }
 
   // 外積の結果が全て同じ符号だったら衝突していない。
   return false;  
 }</code></pre>

