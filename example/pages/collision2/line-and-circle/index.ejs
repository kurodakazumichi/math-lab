---
title: 円と直線の衝突
---
<div id="graph1"></div>

<p>
  ここでは円と直線が衝突しているかどうかについてまとめていきます。
</p>

<p>
  衝突ではなく円と直線の交点の求め方が知りたいという場合は、<a href="../line-and-circle-pos/">円と直線の交点</a>に記載していますのでそちらをご覧ください。
</p>

<h2>考え方</h2>
<div id="graph2_1"></div>
<p>
  円と直線が衝突しているかどうかを調べるには、<b>円の中心と直線の最短距離</b>($C$ から $H$の長さ)を求めます。
</p>

<p>
  最短距離を求めるためには、円の中心と直線の最も近い点($H$)を求める必要があります。
</p>

<p>
  円の中心と直線の最も近い点の求め方は、<a href="../point-and-line-nearest/">点と直線の最近傍点</a>の求め方と同じになりますので、まず先にそちらの記事をご覧ください。
</p>

<p>
  円の中心と直線の最近傍点($H$)が求まれば、そこから最短距離を求められます。あとは最短距離と円の半径を比較し、最短距離が円の半径より短ければ直線と円は当たっているとなります。
</p>

<h2>計算</h2>
<div id="graph2_2"></div>
<p>円の中心を$C$、円の中心と直線の最近傍点を$H$、円の半径を $r$ とします。</p>

<p>
  $C$ から $H$ に向かうベクトル $\vec{CH}$ は $H$ の座標から $C$ の座標を引き算をすれば求まります。
</p>

<p class="math">
  $\vec{CH} = C - H$
</p>

<p>
  あとは、$CH$ の長さと、円の半径 $r$ を比較し、$CH$ の長さの方が短ければ衝突しているとなります。
</p>

<p class="math">
  $|\vec{CH}| &lt r$ であれば衝突している。
</p>

<h2>サンプルコード</h2>

<pre><code>/**
 * 直線と円が当たっているかどうか
 * @param line 直線
 * @param circle 円
 */
function isHit(line:Line, circle:Circle) 
{
  // 円の中心と直線の最近傍点 p を求める
  const p = PointAndLine.getNearestNeighborPoint(circle.p, line);
 
  // 円の中心から p までの距離を d として
  // d < 円の半径 r だったら当たっている
  const d = Vector2.sub(p, circle.p).sqrMagnitude;

  return (d < circle.r * circle.r);
}</code></pre>