---
title: 直線と円の交点
---
<div id="graph1"></div>

<h2>直線と円の交点の考え方</h2>

<p>
  直線と円の交点の求め方は少し複雑なので、まずは基本となる考え方から解説します。
</p>

<div id="graph2_1_1"></div>
<p>
  直線と円が交わっているとします。
</p>

<div id="graph2_1_2"></div>
<p>
  この時、直線と円の交点は2箇所あるので、１つを $P$、もう一つを $P'$ とします。
</p>

<div id="graph2_1_3"></div>
<p>
  円の中心を $C$、$C$ と直線の最近傍点を $H$ とします。
</p>

<div id="graph2_1_4"></div>
<p>
  直線の方向を表すベクトルを正規化したもの(長さを1にしたもの)を ${\vec{n}}$ としておきます。
</p>

<div id="graph2_1_5"></div>
<p>
  こうすると交点 $P$ は $H$ に ${\vec{n}}$ を伸ばしたベクトルを足した位置に来ます。
</p>

<div id="graph2_1_6"></div>
<p>
  また交点 $P'$ は $H$ に $\vec{n}$ を逆向きに伸ばしたベクトルを足した位置に来ます。
</p>

<div id="graph2_1_7"></div>
<p>
  $\vec{n}$ をどれだけ伸ばせばよいかは、$H$ から $P$ までの長さが分かればいけそうです。(求め方は後ほど)
</p>

<p>
  手順が長いですが、直線と円はこのような流れで求めていきます。
</p>

<h2>直線と円の交点の計算</h2>
<div id="graph2_2_1"></div>
<p>
  円の中心を $C$、$C$ と 直線の最近傍点を $H$、直線と円の交点を $P, P'$、円の半径を $r$、直線の向きベクトルを正規化したものを $\vec{n}$ とします。
</p>

<p>
  まず$H$の座標を求めなければなりませんが、$H$ は円の中心($C$)と直線の最近傍点を求めれば求まります。
</p>

<p>
  点と直線の最近傍点の求め方については、<a href="../point-and-line-nearest/">点と直線の最近傍点</a>で詳しく解説していますので、そちらをご覧ください。
</p>

<div id="graph2_2_2"></div>
<p>
  $H$ の座標がわかったら、次に $C$ から $H$に向かうベクトル $\vec{CH}$ を算出します。
</p>

<p>
  $\vec{CH}$ は $H$ から $C$ の座標を引き算すれば求められますし、ベクトルが求まれば、そのベクトルの長さも計算でだせます。
</p>

<p class="math">
  $ \vec{CH} = H - C $
</p>

<div id="graph2_2_3"></div>

<p>
  次に $HP$ の長さを求めます。（図に記載はないですが、便宜上、$HP$ の長さを $t$ と書くことにします)
</p>

<div id="graph2_2_4"></div>

<p>
  ここで 点 $C, H, P$ を結んだ三角形に着目します。
</p>

<p>
  $\triangle CHP$ は直角三角形であり、斜辺の長さは円の半径なので $r$、また三角形の高さは、先ほど求めたベクトル $\vec{CH}$ の長さ($|\vec{CH}|$)です。
</p>

<p>
  知りたい $t$ は三角形の底辺($HP$)の長さに該当します。
</p>

<p>
  直角三角形で２辺の長さが分かっていれば<a href="../../theorem/pythagorean/">三平方の定理</a>から残りの辺の長さを計算する事ができます。
</p>

<p class="math">
  三平方の定理：直角三角形の底辺を $a$、高さを$b$、斜辺を$c$ としたとき<br>
  $c^2 = a^2 + b^2$<br><br>

  これを $a$(底辺) について解くと<br>
  $c^2 = a^2 + b^2$<br>
  $a^2 = c^2 - b^2$<br>
  $a = \sqrt{c^2 - b^2}$  
</p>

<p>
  この式に代入して $HP$ の長さを求めます。
</p>

<div id="graph2_2_5"></div>

<p>
  今回、底辺に該当するのが $t$($HP$の長さ)、高さが $|\vec{CH}|$、斜辺が $r$ とすると
</p>

<p class="math">
  $t = \sqrt{r^2 - |\vec{CH}|^2}$ となります。
</p>

<p>
  ここまでくれば後は簡単です。
</p>

<div id="graph2_2_6"></div>

<p>
  $P$ の位置は $H$ に $\vec{n}$ を $t$ 倍したベクトル ($t\vec{n}$) を足した位置になります。
</p>

<div id="graph2_2_7"></div>

<p>
  $P'$ の位置は $H$ に $\vec{n}$ を $-t$ 倍したベクトル ($-t\vec{n}$) を足した位置になります。
</p>

<p>まとめると以下になります。</p>

<div id="graph2_2_8"></div>

<p class="math">
  $P = H + t\vec{n}$ <br>
  $P' = H - t\vec{n}$ <br>
  $t = \sqrt{r^2 - |\vec{CH}|^2}$
</p>

<p>
  これで直線と円の交点が求まりました、しかし、残念ながら衝突判定的にはまだ考える事が残っています。
</p>

<p>
  というのも、直線と円が接していないときは交点が存在しないですし、直線と円がぴったり接している時は交点が1しかありません。
</p>

<p>
  なので、この直線と円が接していないとき、直線と円がぴったり接している時の判定について、それぞれ考えていきます。
</p>

<h2>直線と円が接していないとき</h2>

<div id="graph3"></div>

<p>
  直線と円が接していないときは交点が存在しないので、交点を求める事ができません。
</p>

<p>
  プログラム的には交点を求める前に、直線と円が接触しているかどうかを判定し、接触していなければそこで処理を抜けます。
</p>

<p>
  直線と円が接触しているかの判定方法は<a href="../line-and-circle/">直線と円の衝突</a>に記載していますのでそちらの記事をご覧ください。
</p>

<h2>直線と円が接しているとき</h2>

<div id="graph4"></div>

<p>
  直線と円が１点で接しているときは当然ですが交点が１つになります。
</p>

<p>
  この場合、$CH$ の長さと円の半径が一致するはずです。
</p>

<p class="math">
  $|\vec{CH}| = r $ ならば 直線と円の交点は１つに定まる。
</p>

<p>
  また直線と円の交点は $H$ になりますので、複雑な計算をする必要なく円の中心と直線の最近傍点を求めるだけとなります。
</p>

<h2>サンプルコード</h2>

<pre><code>/**
  * 直線と円の衝突
  * @param line 直線
  * @param circle 円
  */
 export function intercect(line:Line, circle:Circle) 
 {
   // 衝突判定の結果オブジェクト
   const result:IIntercectResult = {
     hit: false,
     pos: [],
     nearest: Vector2.zero, // 最近傍点
   }
 
   // 円の中心を c とする
   const c = circle.p;
 
   // c と直線の最近傍点 h を求める
   const h = PointAndLine.getNearestPoint(circle.p, line);
   result.nearest = h;
 
   // c -> h に向かうベクトルを hp とする
   const hp = Vector2.sub(h, circle.p);
 
   // hp の長さを hp_len とする
   const hp_len = hp.magnitude;
 
   // hp_len が 円の半径より大きければあたっていない
   if (circle.r < hp_len) return result;
 
   // ここにきたら直線と円はあたっている
   result.hit = true;
 
   // 円と直線の交点を求めていく
 
   // まずは直線と円の交点が1つの場合を考える
   // 直線と円が接している時、 hp_len === r であり、接点は中心と直線の最近傍点になる。
   if (circle.r === hp_len) 
   {
     result.pos.push(h);
     return result;
   }
 
   // 直線と円が交差している(接点が2つあると場合)
 
   // h から 接点までの距離を t とおき、三平方の定理から t を導く
   const t = Math.sqrt(circle.r**2 - hp_len**2);
 
   // 直線の方向ベクトルを正規化したものを t倍したベクトルを tv とすると
   // 交点1：p + sv
   // 交点2：p - sv
   const tv = line.v.normalize.times(t);
 
   result.pos.push(Vector2.add(h, tv));
   result.pos.push(Vector2.sub(h, tv))
 
   return result;
 }</code></pre>